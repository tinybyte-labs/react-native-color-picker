{"version":3,"file":"ColorPicker.js","sourceRoot":"","sources":["../src/ColorPicker.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,SAAS,CAAC;AAO7C,MAAM,CAAC,MAAM,kBAAkB,GAC7B,KAAK,CAAC,aAAa,CAAgC,IAAI,CAAC,CAAC;AAQ3D,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,EAC1B,QAAQ,EACR,SAAS,GAAG,SAAS,EACrB,aAAa,GACI,EAAE,EAAE;IACrB,MAAM,CAAC,KAAK,EAAE,SAAS,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAW,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;IAEzE,MAAM,QAAQ,GAAG,KAAK,CAAC,WAAW,CAChC,CAAC,KAAe,EAAE,EAAE;QAClB,SAAS,CAAC,KAAK,CAAC,CAAC;QACjB,aAAa,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;IACnC,CAAC,EACD,CAAC,aAAa,CAAC,CAChB,CAAC;IAEF,OAAO,CACL,CAAC,kBAAkB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CACtD;MAAA,CAAC,QAAQ,CACX;IAAA,EAAE,kBAAkB,CAAC,QAAQ,CAAC,CAC/B,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,cAAc,GAAG,GAAG,EAAE;IACjC,MAAM,OAAO,GAAG,KAAK,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC;IACrD,IAAI,CAAC,OAAO;QAAE,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;IAC5E,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC","sourcesContent":["import * as React from \"react\";\nimport { hexToRgb, rgbToHex } from \"./utils\";\nimport { RGBColor } from \"./schema/rgb-color\";\n\nexport type ColorPickerContextType = {\n  color: RGBColor;\n  setColor: (color: RGBColor) => void;\n};\nexport const ColorPickerContext =\n  React.createContext<ColorPickerContextType | null>(null);\n\nexport type ColorPickerProps = {\n  children: React.ReactNode;\n  initColor?: string;\n  onColorChange?: (color: string) => void;\n};\n\nexport const ColorPicker = ({\n  children,\n  initColor = \"#000000\",\n  onColorChange,\n}: ColorPickerProps) => {\n  const [color, _setColor] = React.useState<RGBColor>(hexToRgb(initColor));\n\n  const setColor = React.useCallback(\n    (color: RGBColor) => {\n      _setColor(color);\n      onColorChange?.(rgbToHex(color));\n    },\n    [onColorChange]\n  );\n\n  return (\n    <ColorPickerContext.Provider value={{ color, setColor }}>\n      {children}\n    </ColorPickerContext.Provider>\n  );\n};\n\nexport const useColorPicker = () => {\n  const context = React.useContext(ColorPickerContext);\n  if (!context) throw new Error(\"useColorPicker must use inside ColorPicker\");\n  return context;\n};\n"]}